version: "3.8"

services:
  api:
    container_name: api
    env_file: .exemple.env
    develop:
      watch:
        - action: sync
          path: ./api/src
          target: /app/src
    build:
      context: ./api
    ports:
      - ${API_PORT}:3000
    depends_on:
      mongo:
        condition: service_healthy
      minio-bootstrap:
        condition: service_completed_successfully

  mongo:
    container_name: mongo
    image: mongo:7.0
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    healthcheck:
      test: echo 'db.stats().ok' | mongosh localhost:27017 --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  mongo-express:
    container_name: mongoUi
    image: mongo-express:1-20
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_MONGODB_URL: ${MONGO_URI}

  minio:
    image: quay.io/minio/minio:RELEASE.2024-01-18T22-51-28Z
    command: server --console-address ":9001" /home/shared
    tty: true
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 30s
      timeout: 20s

  minio-bootstrap:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_DEFAULT_BUCKETS: ${MINIO_DEFAULT_BUCKETS}
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set remote http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb remote/$${MINIO_DEFAULT_BUCKETS};
      /usr/bin/mc anonymous set public remote/$${MINIO_DEFAULT_BUCKETS};
      exit 0;
      "
